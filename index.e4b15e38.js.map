{"mappings":"YAAA,IAAMA,EAAO,CACTC,OAAQC,SAASC,cAAc,eAC/BC,MAAOF,SAASC,cAAc,SAC9BE,KAAMH,SAASC,cAAc,eAC7BG,SAAUJ,SAASC,cAAc,iBACjCI,eAAgBL,SAASC,cAAc,eACvCK,cAAeN,SAASC,cAAc,eAGtCM,EAAa,GACbC,EAAa,GAEjBV,EAAKC,OAAOU,iBAAiB,SAkB7B,SAAiBC,GACbA,EAAEC,iBAEF,IAAIb,EAAKI,MAAMU,MACX,OACE,IAAGd,EAAKI,MAAMU,MAAMC,MAHb,kDAuBX,OADAC,MAAM,yFACC,EAhBL,IAAMF,EAAQd,EAAKI,MAAMU,MAAMG,OAC/BP,EAAWQ,KAAKJ,GAChB,IAEIK,EAFYT,EAAWU,KAAI,SAAAC,G,OAAMA,EAAGC,MAAM,KAAKC,KAAK,IAAID,MAAM,SAC3CE,SAAQ,SAAAH,G,OAAMA,KACZ,GAGnBI,EAASC,EAAeP,GAC9BV,EAAWS,KAAKC,GAChBQ,EAAYF,GACZzB,EAAKI,MAAMU,MAAQ,GACnBJ,EAAa,MArCrBV,EAAKM,SAASK,iBAAiB,SAW/B,SAAmBC,GACjBZ,EAAKK,KAAKuB,UAAY,GACtBnB,EAAa,GACboB,QAAQC,IAAIrB,MAbdT,EAAKO,eAAeI,iBAAiB,SA4DrC,SAAqBC,GAEjB,GADAZ,EAAKK,KAAKuB,UAAY,GACnBnB,EAAY,CACb,IAAMsB,EAAgBtB,EAAWW,KAAI,SAAAC,G,OAAMA,EAAGC,MAAM,KAAKU,UAAUT,KAAK,QAExEQ,EAAcE,MAAK,SAACC,EAAGC,G,OAAMD,EAAEE,cAAcD,MAC7C,IACME,EADcN,EAAcX,KAAI,SAAAC,G,OAAMA,EAAGC,MAAM,KAAKU,UAAUT,KAAK,QAC7Ce,QAAO,SAACC,EAAKC,G,OAASD,EAAMb,EAAec,KAAO,IAC9Eb,EAAYU,OAnElBrC,EAAKQ,cAAcG,iBAAiB,SA8EnC,WAEG,GADAX,EAAKK,KAAKuB,UAAY,GACnBnB,EAAY,CACb,IACM4B,EADe5B,EAAWwB,MAAK,SAACC,EAAGC,G,OAAMD,EAAEE,cAAcD,MACjCG,QAAO,SAACC,EAAKC,G,OAASD,EAAMb,EAAec,KAAO,IAChFb,EAAYU,OAhFlB,IAAMX,EAAiB,SAACc,G,MAAS,+BAAoCC,OAALD,EAAK,UAE/Db,EAAc,SAACU,GACjBrC,EAAKK,KAAKqC,mBAAmB,YAAaL,I","sources":["src/index.js"],"sourcesContent":["const refs = {\n    addBtn: document.querySelector('.add_button'),\n    input: document.querySelector('input'),\n    list: document.querySelector('.pairs_list'),\n    clearBtn: document.querySelector('#clear_button'),\n    sortByValueBtn: document.querySelector('.sort_value'),\n    sortByNameBtn: document.querySelector('.sort_name')\n}\n \nlet arrOfPairs = []\nlet arrForTrim = []\n\nrefs.addBtn.addEventListener('click', addPair)\nrefs.clearBtn.addEventListener('click', clearList)\nrefs.sortByValueBtn.addEventListener('click', sortByValue)\nrefs.sortByNameBtn.addEventListener('click', sortByName)\n\n\nconst createListItem = (text) => `<li class=\"pairs-list_item\">${text}</li>`\n\nconst addLiToList = (markdown) => {\n    refs.list.insertAdjacentHTML('beforeend', markdown)\n}\n\nfunction clearList(e) {\n  refs.list.innerHTML = ''\n  arrOfPairs = []\n  console.log(arrOfPairs)\n}\n \nfunction addPair(e) {\n    e.preventDefault() \n    const letters = /^[a-zA-Z0-9\\s]*=(?=[\\sa-zA-Z0-9]+[a-zA-Z0-9]$)/;\n    if(!refs.input.value) {\n        return\n    }else if(refs.input.value.match(letters))\n      {\n\n        // delete all spaces between \"=\" and \"Name/Value\" pair\n        const value = refs.input.value.trim()\n        arrForTrim.push(value)\n        const trimArr = arrForTrim.map(el => el.split(' ').join('').split('  '))\n        const newArr = trimArr.flatMap(el => el)\n        let trimmedName = newArr[0]\n        \n        // create list item and push it into list\n        const liItem = createListItem(trimmedName)\n        arrOfPairs.push(trimmedName)\n        addLiToList(liItem)\n        refs.input.value = ''\n        arrForTrim = []\n      }\n    else\n      {\n      alert(\"Write 'Name=Value' pair. Names and Values can contain only alpha-numeric characters.\");\n      return false;\n      }\n       \n}\n\n// Leonit = Augtin\n// Antony = Boris\n// Boris =   Johnson\n// Kilo = Mike\n// Yankee = Victor\n// Frank =  Antony\n// Echo = Bravo\n// Delta =  Charlie\n\n/* \n * Sorting list by Value. Reversing the array two times\n*/\n\n\nfunction sortByValue(e) {\n    refs.list.innerHTML = ''\n    if(arrOfPairs) {\n      const sortedByValue = arrOfPairs.map(el => el.split('=').reverse().join('='))\n       \n      sortedByValue.sort((a, b) => a.localeCompare(b))\n      const sortedBack =  sortedByValue.map(el => el.split('=').reverse().join('='))\n      const markdown = sortedBack.reduce((acc, text) => acc + createListItem(text), '')\n      addLiToList(markdown)\n    }\n    \n   \n}\n\n/* \n * Sorting list by Name \n*/\n\n\n function sortByName () {\n    refs.list.innerHTML = ''\n    if(arrOfPairs) {\n      const sortedByName = arrOfPairs.sort((a, b) => a.localeCompare(b))  \n      const markdown = sortedByName.reduce((acc, text) => acc + createListItem(text), '')\n      addLiToList(markdown)\n    }\n     \n}"],"names":["$b8f9b7833fa37166$var$refs","addBtn","document","querySelector","input","list","clearBtn","sortByValueBtn","sortByNameBtn","$b8f9b7833fa37166$var$arrOfPairs","$b8f9b7833fa37166$var$arrForTrim","addEventListener","e","preventDefault","value","match","alert","trim","push","trimmedName","map","el","split","join","flatMap","liItem","$b8f9b7833fa37166$var$createListItem","$b8f9b7833fa37166$var$addLiToList","innerHTML","console","log","sortedByValue","reverse","sort","a","b","localeCompare","markdown","reduce","acc","text","concat","insertAdjacentHTML"],"version":3,"file":"index.e4b15e38.js.map"}